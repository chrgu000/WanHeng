思考:
1.同一个浏览器,先后用不同的帐号去登录!
2.不同的浏览器,先后用同一个帐号去登录!
    /**
	 * 登录的功能
	 */
	public String login(HttpServletRequest req,HttpServletResponse resp){
		// 接收数据
		Map<String, String[]> map = req.getParameterMap();
		User user = new User();
		// 封装数据
		try {
			BeanUtils.populate(user, map);
			// 调用Service层处理数据 
			UserService us = new UserService();
			User existUser = us.login(user);
			if (existUser == null) {
				// 用户登录失败
				req.setAttribute("msg", "用户名或密码错误!");
				return "/index.jsp";
			} else {
				// 用户登录成功
				// 第一个BUG的解决:第二个用户登录后将之前的session销毁!
				req.getSession().invalidate();
				// 第二个BUG的解决:判断用户是否已经在Map集合中,存在：已经在列表中.销毁其session.
				// 获得到ServletCOntext中存的Map集合.
				Map<User, HttpSession> userMap = (Map<User, HttpSession>) getServletContext()
						.getAttribute("userMap");
				// 判断用户是否已经在map集合中'
				if(userMap.containsKey(existUser)){
					// 说用map中有这个用户.
					HttpSession session = userMap.get(existUser);
					// 将这个session销毁.
					session.invalidate();
				}
				// 使用监听器:HttpSessionBandingListener作用在JavaBean上的监听器.
				req.getSession().setAttribute("existUser", existUser);
				ServletContext application = getServletContext();

				String sourceMessage = "";

				if (null != application.getAttribute("message")) {
					sourceMessage = application.getAttribute("message")
							.toString();
				}
				sourceMessage += "系统公告：<font color='gray'>"
						+ existUser.getUsername() + "走进了聊天室！</font><br>";
				application.setAttribute("message", sourceMessage);

				resp.sendRedirect(req.getContextPath() + "/main.jsp");
				return null;
			}
		} catch (Exception e) {
			e.printStackTrace();
		} 
		return null;
	}
session application 前端样式
聊天室核心思想:
1.在线人员列表
2.实时检测是否在线
3.实时获取聊天记录
其中人员列表与聊天记录保存在ServletContext中。

3.DBUtils:
import org.apache.commons.dbutils.QueryRunner;
import org.apache.commons.dbutils.handlers.BeanHandler;
import cn.itcast.utils.JDBCUtils;
import cn.itcast.vo.User;
public class UserDaoImple implements UserDao {
	public User login(User user) {
		QueryRunner queryRunner = new QueryRunner(JDBCUtils.getDataSource());
		String sql = "select * from user where username = ? and password = ?";
		User existUser;
		try {
			existUser = queryRunner.query(sql, new BeanHandler<User>(User.class), user.getUsername(),user.getPassword());
		} catch (SQLException e) {
			e.printStackTrace();
			throw new RuntimeException("用户登录失败!");
		}
		return existUser;
	}
}
private static ComboPooledDataSource dataSource = new ComboPooledDataSource();
	// 获得连接池:
	public static DataSource getDataSource(){
		return dataSource;
	}
	// 获得连接
	public static Connection getConnection() {
		Connection conn = null;
		try {
			conn = dataSource.getConnection();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return conn;
	}
	
4.BeanUtils:
import org.apache.commons.beanutils.BeanUtils;
	Map<String, String[]> map = req.getParameterMap();
	User user = new User();
	BeanUtils.populate(user, map);

5.利用反射设计基类Servlet:
 明白这个就理解了Struts2,SpringMVC框架
protected void service(HttpServletRequest req, HttpServletResponse res)
			throws ServletException, IOException {
	req.setCharacterEncoding("UTF-8");
	res.setContentType("text/html;charset=utf-8");

	// 例如：http://localhost:8080/demo1/xxx?method=login
	String methodName = req.getParameter("method");// 它是一个方法名称
	
	// 当没用指定要调用的方法时，那么默认请求的是execute()方法。
	if(methodName == null || methodName.isEmpty()) {
		methodName = "execute";
	}
	Class c = this.getClass();
	try {
		// 通过方法名称获取方法的反射对象
		Method m = c.getMethod(methodName, HttpServletRequest.class,
				HttpServletResponse.class);
		// 反射方法目标方法，也就是说，如果methodName为add，那么就调用add方法。
		String result = (String) m.invoke(this, req, res);
		// 通过返回值完成请求转发
		if(result != null && !result.isEmpty()) {
			req.getRequestDispatcher(result).forward(req, res);
		}
	} catch (Exception e) {
		throw new ServletException(e);
	}
}

派生类的一个方法
public String getMessage(HttpServletRequest req,HttpServletResponse resp) throws IOException{
		String message = (String) getServletContext().getAttribute("message");
		if(message != null){
			resp.getWriter().println(message);
		}
		return null;
}
BaseServlet
	1.我们希望在一个Servlet中可以有多个请求处理方法
	2、客户端发送请求时，必须多给出一个参数，用来说明要调用的方法
	3、参数名遵守约定
	4、希望帮助简化重定向和转发，利用返回值

6.session监听
import javax.servlet.http.HttpSession;
import javax.servlet.http.HttpSessionBindingEvent;
import javax.servlet.http.HttpSessionBindingListener;

public class User implements HttpSessionBindingListener,Serializable {
	private static final long serialVersionUID = 1L;
	private int id;
	private String username;
	private String password;
	private String type;
	public void valueBound(HttpSessionBindingEvent event) {
		System.out.println("进入了....");
		HttpSession session = event.getSession();
		Map<User, HttpSession> userMap = (Map<User, HttpSession>) session
				.getServletContext().getAttribute("userMap");
		userMap.put(this, session);
	}
	// 当session和对象解除绑定的时候
	public void valueUnbound(HttpSessionBindingEvent event) {
		System.out.println("退出了....");
		HttpSession session = event.getSession();//通过事件对象可以获取事件源对象
		// 获得人员列表
		Map<User, HttpSession> userMap = (Map<User, HttpSession>) session
				.getServletContext().getAttribute("userMap");
		// 将用户移除了
		userMap.remove(this);
	}
	对于session中已有user，而后执行session.setAttribute('user',user);,则会分别调用valueBound和valueUnbound
7.session.invalidate();
 session.invalidate()表示将session中的变量全部清空。在内存中销毁，随即又生成一个新的session
 执行该方法后对于同一session的如下方法：
 session.setAttribute();
 session.getAttribute();
 session.removeAttribute();
 不能使用。
 除非重新获取session对象后再执行;
 即：request.getHttpSession().setAttribute();

 redisSession异常【待解决】：

 三月 02, 2018 9:40:31 上午 com.radiadesign.catalina.session.RedisSessionManager loadSessionFromRedis
 严重: Unable to deserialize into session
 java.lang.ClassNotFoundException: cn.itcast.vo.User


 8.servletContext监听
 import javax.servlet.ServletContextEvent;
 import javax.servlet.ServletContextListener;
 /**
 * 监听ServletContext对象创建和销毁
 */
public class MyServletContextListener implements ServletContextListener{
	// ServletContext对象创建 下面这个方法就会执行
	// ServletContextEvent事件对象. 监听器对象---》ServletContext对象.(事件源)
	public void contextInitialized(ServletContextEvent sce) {
		Map<User,HttpSession> userMap = new HashMap<User,HttpSession>();
		sce.getServletContext().setAttribute("userMap", userMap);//通过事件对象可以获取事件源对象
	}
	public void contextDestroyed(ServletContextEvent sce) {
	}
<!-- 注册监听器 web.xml-->
  <listener>
  	<listener-class>cn.itcast.listener.MyServletContextListener</listener-class>
  </listener>
  9.$(function(){}) 与window.onload的区别：
  10.$(function(){}: 在dom文档树加载完之后执行一个函数,一个html文档里面可以有多个
   window.onload：在dom文档树加载完和所有文件加载完之后执行一个函数。也就是说$(function(){})要比window.onload先执行。
  11.JSP的document.write和out.println什么区别:
    document.write(String)是在浏览器里运行的。参数需要为字符串，否则输出的是乱七八糟的东西或者不显示（不会报错）
	而out.print(Object)是服务器向浏览器发数据用的.其中的参数可以为Object，也就是说什么都可以输出。
  12.request.getContextPath()与${pageContext.request.contextPath} ：项目工程名
  13.   if(document.getElementById("form1").username.value==""){
			alert("请输入用户名！");
			document.getElementById("form1").username.focus();
			return false;
		}
  14.	<center><h3 style="color:red;">${ msg }</h3></center>
        center标签。使元素居中显示
  15.   <div background="images/login.jpg"></div>
  16.   align,valign
        <div align="value">:水平对齐
        left	左对齐内容。
		right	右对齐内容。
		center	居中对齐内容。
		justify	对行进行伸展，这样每行都可以有相等的长度（就像在报纸和杂志中）。
		<td valign="value">:垂直对齐
		top	对内容进行上对齐。
		middle	对内容进行居中对齐（默认值）。
		bottom	对内容进行下对齐。
		baseline	与基线对齐。
  17.$.post("${pageContext.request.contextPath}/online.jsp?"+new Date().getTime(),function(data){
			// $("#online") == document.getElementById("online");
			$("#online").html(data);
		});
	ajax请求也可以向jsp页面请求数据；返回的数据是对应jsp页面的静态部分，new Date().getTime()是为了解决缓存问题
  18.overflow:规定当内容溢出元素框时发生的事情。
	值	描述
	visible	默认值。内容不会被修剪，会呈现在元素框之外。
	hidden	内容会被修剪，并且其余内容是不可见的。
	scroll	内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容。
	auto	如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容。
	inherit	规定应该从父元素继承 overflow 属性的值。
   19.onKeyDown="if(event.keyCode==13 && event.ctrlKey){send();}">
   20.用jstl标签遍历Map对象
	  <c:forEach var="entry" items="${userMap}">
	  <tr>
	    <td height="23" align="center">
	    	<a href="#" onclick="set('${ entry.key.username }')">${ entry.key.username }</a> 
	    	<c:if test="${ existUser.type == 'admin' and entry.key.type != 'admin'}">
				<a href="${ pageContext.request.contextPath }/user?method=kick&id=${ entry.key.id }">踢下线</a>
			</c:if>
		</td>
	  </tr>
	</c:forEach>
    21.jsp中的 out.println(Object);
    <%if(null == session.getAttribute("existUser")){
	out.println("<script language='javascript'>alert('您的账户已经过期，请重新登录!');window.location='index.jsp';</script>");
	return;
    }%>